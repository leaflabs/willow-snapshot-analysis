#!/usr/bin/python
""" This widget is very similar to willow-streaming-analysis's Chipstream widget.
It presents an animation that "plays back" pre-recorded Willow snapshots or
experiments as though the data were still streaming live. """

from PyQt4 import QtCore, QtGui

import os, sys
import numpy as np
import scipy.signal as signal
import itertools
import warnings

import glob, h5py

from vispy import gloo, app, scene, visuals
from vispy.visuals import transforms
from vispy.visuals.collections import SegmentCollection

from filtering import FilterPlotWindow

sys.path.append('../lib/py')
from WillowDataset import WillowDataset

nrows = 8
ncols = 4
nchans = nrows*ncols

MICROVOLTS_PER_COUNT = 0.195

class PlaybackWindow(QtGui.QWidget):

    def __init__(self, params, dataset, impedanceMap):
        super(PlaybackWindow, self).__init__(None)

        self.dataset = dataset

        self.impedance = impedanceMap
        self.display_impedance = True if self.impedance != None else False

        ymin = -6390
        ymax = 6390
        self.deltay_uv = ymax - ymin
        self.deltax_ms = params['xrange']
        self.refreshRate = params['refreshRate']

        ###################
        # Top-level stuff
        ##################

        self.startButton = QtGui.QPushButton()
        self.startButton.setIcon(QtGui.QIcon('play.png'))
        self.startButton.setIconSize(QtCore.QSize(25,25))
        self.startButton.clicked.connect(self.startPlayback)

        self.stopButton = QtGui.QPushButton()
        self.stopButton.setIcon(QtGui.QIcon('pause.png'))
        self.stopButton.setIconSize(QtCore.QSize(25,25))
        self.stopButton.clicked.connect(self.stopPlayback)

        self.filterCheckbox = QtGui.QCheckBox('Filtering displayed data')
        self.filterCheckbox.setCheckState(QtCore.Qt.Unchecked)
        self.filtering = False
        self.filterCheckbox.toggled.connect(self.toggleFiltering)
        self.plotHButton = QtGui.QPushButton('Plot Transfer Function')
        self.plotHButton.clicked.connect(self.launchFilterPlot)
        self.lowcutLabel = QtGui.QLabel('Lower cutoff (Hz)')
        self.lowcutLine = QtGui.QLineEdit('300')
        self.lowcutLine.setMaxLength(6)
        self.lowcutLine.setValidator(QtGui.QIntValidator())
        self.lowcutAccept = QtGui.QPushButton('Update lowcut')
        self.lowcutAccept.clicked.connect(self.setLowcut)
        self.setLowcut()
        self.highcutLabel = QtGui.QLabel('Higher cutoff (Hz)')
        self.highcutLine = QtGui.QLineEdit('9500')
        self.highcutLine.setMaxLength(6)
        self.highcutLine.setValidator(QtGui.QIntValidator())
        self.highcutLine.editingFinished.connect(self.setHighcut)
        self.highcutAccept = QtGui.QPushButton('Update highcut')
        self.highcutAccept.clicked.connect(self.setHighcut)
        self.setHighcut()

        self.filterPanel = QtGui.QWidget()
        filterAccept = QtGui.QWidget()
        filterParams = QtGui.QWidget()
        filterAcceptLayout = QtGui.QVBoxLayout()
        filterParamsLayout = QtGui.QGridLayout()
        filterAcceptLayout.addWidget(self.filterCheckbox)
        filterAcceptLayout.addWidget(self.plotHButton)
        filterParamsLayout.addWidget(self.lowcutLabel, 0,0)
        filterParamsLayout.addWidget(self.lowcutLine, 1,0)
        filterParamsLayout.addWidget(self.lowcutAccept, 2,0)
        filterParamsLayout.addWidget(self.highcutLabel, 0,1)
        filterParamsLayout.addWidget(self.highcutLine, 1,1)
        filterParamsLayout.addWidget(self.highcutAccept, 2,1)
        filterAccept.setLayout(filterAcceptLayout)
        filterParams.setLayout(filterParamsLayout)
        filterLayout = QtGui.QHBoxLayout()
        filterLayout.addWidget(filterAccept)
        filterLayout.addWidget(filterParams)
        self.filterPanel.setLayout(filterLayout)

        self.chipNumberLine = QtGui.QLineEdit(str(params['chip']))
        self.chipNumberLine.setMaxLength(2)
        self.setChipButton = QtGui.QPushButton('Plot chip specified')
        self.setChipButton.clicked.connect(self.changeChip)
        self.chipSelection = QtGui.QWidget()
        chipLayout = QtGui.QVBoxLayout()
        chipLayout.addWidget(self.chipNumberLine)
        chipLayout.addWidget(self.setChipButton)
        self.chipSelection.setLayout(chipLayout)

        if self.impedance != None:
            self.impedanceCheckbox = QtGui.QCheckBox('Display impedance')
            self.impedanceCheckbox.setCheckState(QtCore.Qt.Checked)
            self.impedanceCheckbox.toggled.connect(self.toggleImpedanceLabels)

            self.refCheckbox = QtGui.QCheckBox('Use software reference')
            self.refCheckbox.setCheckState(QtCore.Qt.Unchecked)
            self.refCheckbox.toggled.connect(self.toggleRef)
        self.use_ref = False

        self.buttonPanel = QtGui.QWidget()
        buttonsLayout = QtGui.QHBoxLayout()
        buttonsLayout.addWidget(self.startButton)
        buttonsLayout.addWidget(self.stopButton)
        buttonsLayout.addWidget(self.chipSelection)
        buttonsLayout.addWidget(self.filterPanel)
        if self.impedance != None:
            buttonsLayout.addWidget(self.refCheckbox)
            buttonsLayout.addWidget(self.impedanceCheckbox)
        self.buttonPanel.setLayout(buttonsLayout)
        self.buttonPanel.setMaximumHeight(150)
        if self.impedance != None:
            self.buttonPanel.setMaximumWidth(1200)
        else:
            self.buttonPanel.setMaximumWidth(800)

        self.infoLabel = QtGui.QLabel()
        self.infoLabel.setMaximumHeight(60)

        #########################
        # vispy plotting stuff
        #########################

        sr = 30000                               # sample rate, in Hz
        frame_rate = self.refreshRate
        self.frame_period = 1000//frame_rate     # frame period, in ms
        self.nsamps = 30*self.deltax_ms - 1    # number of samples to display
        self.nrefresh = sr//frame_rate   # new samples collected before refresh

        self.canvas = ChipCanvas(self.nsamps, self.nrefresh, ymin, ymax, parent=self)

        self.initPlotBuffs()
        self.initPlotRange()
        self.initChip(params['chip'])
        self.doneReplaying = False
        self.frameTimer = QtCore.QTimer()
        self.frameTimer.timeout.connect(self.updatePlot)

        self.canvas.draw_new_data(np.zeros((nchans, self.nsamps), dtype='float'),
                                  self.nsamps)

        self.layout = QtGui.QVBoxLayout()
        self.layout.addWidget(self.buttonPanel)
        self.layout.addWidget(self.infoLabel)
        self.layout.addWidget(self.canvas.native)

        self.setLayout(self.layout)

        self.setWindowTitle('Willow Recorded Playback')


    def toggleFiltering(self, checkbox_state):
        self.filtering = checkbox_state

    def toggleRef(self, checkbox_state):
        self.use_ref = checkbox_state

    def toggleImpedanceLabels(self, checkbox_state):
        self.display_impedance = checkbox_state
        self.canvas.updateLabels()
        self.canvas.update()

    def setLowcut(self):
        self.lowcut = float(self.lowcutLine.text())

    def setHighcut(self):
        self.highcut = float(self.highcutLine.text())

    def launchFilterPlot(self):
        filt = self.getFilter()
        self.fpw = FilterPlotWindow(filt, [self.lowcut, self.highcut])
        self.fpw.show()

    def startPlayback(self):
        self.frameTimer.start(self.frame_period)

    def stopPlayback(self):
        self.frameTimer.stop()

    def setInfoLabel(self, xr, yr):
        self.infoLabel.setText('Chip %d: xrange = %3.2f ms, yrange = %3.2f uV\n'
                                '(ctrl+mousewheel zooms horizontally, ctrl+shift+mousewheel zooms vertically)'
                                        % (self.chip, xr, yr))

    def getNewData(self):
        if self.plot_range[1] < self.dataset.sampleRange[1]:
            return self.dataset.data_uv[self.chip*nchans:(self.chip+1)*nchans,
                self.plot_range[0]:self.plot_range[1]]
        else:
            return self.dataset.data_uv[self.chip*nchans:(self.chip+1)*nchans,
                self.plot_range[1]-self.nrefresh:self.plot_range[1]]

    def getFilter(self):
        nyq = 1.5e4    # 30 kHz sampling frequency -> 15 kHz nyquist rate
        order = 5
        warnings.filterwarnings('error') # catch division by zero when filtering
        try:
            b, a = signal.butter(order,[self.lowcut/nyq, self.highcut/nyq],btype='bandpass')
            warnings.filterwarnings('default')
            return b, a
        except:
            raise Exception('Illegal filtering cutoffs (low={}, high={}).'.format(
                   self.lowcut, self.highcut))
            warnings.filterwarnings('default')
            return 1, 1

    def changeChip(self):
        self.stopPlayback()
        chip = int(self.chipNumberLine.text())
        self.initPlotRange()
        self.initPlotBuffs()
        self.initChip(chip)

    def initChip(self, chip):
        self.chip = chip
        if self.impedance != None:
            self.bad_chans = np.array([c for c in range(nchans) if
                self.impedanceBad(self.getImpedance(c+self.chip*32))])
            self.impMask = np.zeros_like(self.plotBuff_raw)
            self.impMask[self.bad_chans,:] = True
        self.canvas.updateLabels()
        self.canvas.draw_new_data(np.zeros((nchans, self.nsamps), dtype='float'),
                                  self.nsamps)
        self.setInfoLabel(self.deltax_ms, self.deltay_uv)

    def initPlotBuffs(self):
        self.draw_point = 0
        self.plotBuff = np.zeros((nchans, self.nsamps), dtype='float')
        self.plotBuff_raw = np.zeros((nchans, self.nsamps), dtype='float')
        self.newBuff = np.zeros((nchans, self.nrefresh), dtype='float')

    def initPlotRange(self):
        self.plot_range = [self.dataset.sampleRange[0],
                           self.dataset.sampleRange[0] + self.nrefresh]
        if self.plot_range[1] > self.dataset.sampleRange[1]:
            # if dataset less than 1 frame's length, pad remainder of frame with 0's
            # (this should not really happen for reasonable recording lengths
            # and display rates)
            self.dataset.data_uv = np.concatenate((self.dataset.data_uv[:,:],
                np.zeros((1024, self.plot_range[1]-self.dataset.sampleRange[1]))),1)
            self.dataset.sampleRange[1] = self.plot_range[1]

    def getImpedance(self, chan_idx):
        return self.impedance[chan_idx]/1000.   # in kohms

    def impedanceBad(self, impedance):
        # tests whether an impedance, in kohms, is too high
        # (indicating open-circuit channel)
        return impedance > 1000.

    def updatePlot(self):
        self.newBuff = self.getNewData()
        if self.draw_point == 0:
            self.plotBuff_raw = np.concatenate((self.newBuff[:,:],
                self.plotBuff_raw[:,self.nrefresh:]),1)
            last_point = self.draw_point + self.nrefresh - 1
        elif self.draw_point + self.nrefresh > self.nsamps:
            # overflow of new data back to beginning of plot
            overflow_amt = self.draw_point + self.nrefresh - self.nsamps
            self.plotBuff_raw = np.concatenate((self.newBuff[:,-overflow_amt:],
                self.plotBuff_raw[:,overflow_amt:self.draw_point],
                self.newBuff[:,:self.nrefresh-overflow_amt]),1)
            last_point = overflow_amt - 1
        else:
            # draw new data in the middle of old data
            self.plotBuff_raw = np.concatenate((self.plotBuff_raw[:,:self.draw_point],
                self.newBuff[:,:],
                self.plotBuff_raw[:,self.draw_point+self.newBuff.shape[1]:]),1)
            last_point = self.draw_point + self.newBuff.shape[1] - 1

        ########
        # post-processing
        #####

        if self.use_ref:
            m_plotBuff = np.ma.masked_array(self.plotBuff_raw, self.impMask)
            mean = np.ma.mean(m_plotBuff, axis=0)
            if np.ma.is_masked(mean):
                # if all channels to display were bad
                self.plotBuff = self.plotBuff_raw
            else:
                # subtract mean data from good channels (leave bad channels)
                good_chans = [c for c in range(nchans) if c not in self.bad_chans]
                self.plotBuff[good_chans,:] = self.plotBuff_raw[good_chans,:] - mean
                self.plotBuff[self.bad_chans,:] = self.plotBuff_raw[self.bad_chans,:]
        else:
            self.plotBuff = self.plotBuff_raw

        if self.filtering:
            b, a = self.getFilter()
            self.plotBuff = signal.filtfilt(b, a, self.plotBuff, axis=1)

        self.canvas.draw_new_data(self.plotBuff, last_point)

        # handle end of stream
        if self.plot_range[1] > self.dataset.sampleRange[1]:
            self.stopPlayback()
            self.initPlotRange()
            self.draw_point = 0
        else:
            self.draw_point += self.nrefresh
            self.draw_point %= self.plotBuff.shape[1]
            self.plot_range[0] += self.nrefresh
            self.plot_range[1] += self.nrefresh


VERT_SHADER = """
#version 120

// y coordinate of the position.
attribute float a_position;

// Range of displayable y-coordinates.
uniform vec2 u_yrange;

// Row, col, and time index.
attribute vec3 a_index;
varying vec3 v_index;

// 2D scaling factor (zooming).
uniform vec2 u_scale;

// Number of samples per signal.
uniform float u_nsamps;

// Color.
uniform vec4 u_colors[{NCHANNELS}];
varying vec4 v_color;

// Index in plot representing where new data begins to be drawn.
// (Used for coloring eye-candy.)
uniform int u_latest_point;

// Varying variables used for clipping in the fragment shader.
varying vec2 v_position;
varying vec4 v_ab;

void main() {{
    float ymin = u_yrange.x;
    float ymax = u_yrange.y;
    // Normalize data, with x in the range (0, u_nsamps-1), y in range (ymin, ymax),
    // to fit within a subplot, with x in range (-1,1), y in range(-1,1).
    float x = -1 + 2*a_index.z / (u_nsamps-1);
    float y = 0 + 2*a_position / (ymax-ymin);
    vec2 position = vec2(x, y);
    // Find the affine transformation for the subplots.
    vec2 a = vec2(1./{NCOLS}, 1./{NROWS})*{SUBPLOT_HORIZONTAL_FILL};
    vec2 b = vec2(-1 + 2*(a_index.x + 0.5) / {NCOLS},
                   1 - 2*(a_index.y + 0.5) / {NROWS});
    // Apply the static subplot transformation + scaling.
    gl_Position = vec4(a*u_scale*position+b, 0.0, 1.0);

    int channel = int(a_index.y*{NCOLS} + a_index.x);

    v_color = u_colors[channel];
    // Make most recent data brighter and least-recent data dimmer.
    // This makes following new data easier on eyes.
    float oldness;
    if ((a_index.z <= u_latest_point))
        oldness = u_latest_point - a_index.z;
    else
        oldness = u_latest_point + (u_nsamps - a_index.z);
    v_color.x = v_color.x * 1.0 - (oldness/u_nsamps)*0.60;
    v_color.y = v_color.y * 1.0 - (oldness/u_nsamps)*0.60;
    v_color.z = v_color.z * 1.0 - (oldness/u_nsamps)*0.60;
    v_index = a_index;
    // For clipping test in the fragment shader.
    v_position = gl_Position.xy;
    v_ab = vec4(a, b);
}}
""".format(NCOLS=ncols, NROWS=nrows, NCHANNELS=nrows*ncols,
        SUBPLOT_HORIZONTAL_FILL=0.95)

FRAG_SHADER = """
#version 120

varying vec4 v_color;
varying vec3 v_index;

varying vec2 v_position;
varying vec4 v_ab;

void main() {
    gl_FragColor = v_color;
    // Discard the fragments between the signals (emulate glMultiDrawArrays).
    if ((fract(v_index.x) > 0.) || (fract(v_index.y) > 0.))
        discard;
    // Clipping test.
    vec2 test = abs((v_position.xy-v_ab.zw)/v_ab.xy);
    if ((test.x > 1) || (test.y > 1))
        discard;
}
"""

ncols = 4
nrows = 8

class ChipCanvas(app.Canvas):

    def __init__(self, nsamps, nrefresh, ymin, ymax, parent=None):

        self.parent = parent
        self.nrefresh = nrefresh
        self.nsamps = nsamps
        self.ymin = ymin
        self.ymax = ymax

        vertex_data = np.zeros((ncols, nrows, self.nsamps),
            dtype=[('a_index', np.float32, 3)])

        self.subplot_indices = set((x,y) for x,y in \
            itertools.product(xrange(ncols),xrange(nrows)))

        point_indices = set((x,y,i) for x,y,i in \
            itertools.product(xrange(ncols),xrange(nrows),xrange(self.nsamps)))
        for (x,y,i) in point_indices:
            vertex_data['a_index'][x,y,i] = np.array([x,y,i])
        self._program = gloo.Program(VERT_SHADER, FRAG_SHADER)
        self._program.bind(gloo.VertexBuffer(vertex_data))

        # a_position field will be yvals of subplots, in uVolts
        self.repacked_yvals = np.zeros((ncols, nrows, self.nsamps), np.float32)
        self._program['a_position'] = self.repacked_yvals.ravel()

        self._program['u_latest_point'] = self.nrefresh
        self._program['u_yrange'] = (self.ymin, self.ymax)
        self._program['u_scale'] = (1., 1.)
        self._program['u_nsamps'] = self.nsamps
        self.default_rgb = np.array((0.559, 0.855, 0.563))
        default_rgba = np.append(self.default_rgb, 1.0)
        self.bad_impedance_rgb = np.array((0.5, 0.5, 0.5))
        self.subplot_indices = set((x,y) for x,y in \
            itertools.product(xrange(ncols),xrange(nrows)))
        for (x,y) in self.subplot_indices:
            chan_idx = y*ncols + x
            self._program['u_colors[{CI}]'.format(CI=chan_idx)] = default_rgba

        # borders around plots
        self.border_collection = None

        # labels around plots
        self.label_visual = None

        # axis to be drawn around plot mouse clicks on
        self.selected_plots = []

        super(ChipCanvas, self).__init__(app='pyqt4',
                                         keys='interactive', parent=parent)

        gloo.set_viewport(0, 0, *self.physical_size)

        gloo.set_state(clear_color=(0.10, 0.10, 0.10, 1.0), blend=True,
                       blend_func=('src_alpha', 'one_minus_src_alpha'))

        self.createBorders()
        self.show()

    def createBorders(self):
        plot_w = 2.0/ncols
        plot_h = 2.0/nrows

        n_xborders = ncols - 1
        n_yborders = nrows - 1

        self.border_collection = SegmentCollection("agg")

        # horizontal borders
        c0 = np.dstack(
             (np.linspace(-1.0+plot_w, 1.0-plot_w, n_xborders), \
              -1.0*np.ones(n_xborders), np.zeros(n_xborders))).reshape(n_xborders, 3)
        c1 = np.dstack(
             (np.linspace(-1.0+plot_w, 1.0-plot_w, n_xborders), \
              np.ones(n_xborders), np.zeros(n_xborders))).reshape(n_xborders, 3)
        self.border_collection.append(c0, c1)

        # vertical borders
        r0 = np.dstack(
             (-1.0*np.ones(n_yborders), \
              np.linspace(-1.0+plot_h, 1.0-plot_h, n_yborders), \
              np.zeros(n_yborders))).reshape(n_yborders, 3)
        r1 = np.dstack(
             (np.ones(n_yborders), \
              np.linspace(-1.0+plot_h, 1.0-plot_h, n_yborders), \
              np.zeros(n_yborders))).reshape(n_yborders, 3)
        self.border_collection.append(r0, r1)

        self.border_collection['antialias'] = 1
        self.border_collection['viewport'] = 0, 0, self.physical_size[0], self.physical_size[1]
        self.border_collection['color'] = (1.0, 1.0, 1.0, 1.0)

    def createLabels(self):
        texts = []
        poses = []
        a = (self.physical_size[0]/ncols, self.physical_size[1]/nrows)
        font_size = 8
        for (x,y) in self.subplot_indices:
            chan_idx = y*ncols + x + 32*self.parent.chip
            texts.append(' Channel {c}'.format(c=chan_idx))
            poses.append((a[0]*x, a[1]*(y+0.125)))
            if self.parent.display_impedance:
                impedance = self.parent.getImpedance(chan_idx)
                impedance_label = u' Impedance: {i:,.2f} k\N{OHM SIGN}'.format(i=impedance)
                if self.parent.impedanceBad(impedance):
                    impedance_label += ' (BAD)'
                texts.append(impedance_label)
                poses.append((a[0]*x, a[1]*(y+0.875)))
            self.label_visual = visuals.TextVisual(text=texts,
            color=(0.5,0.5,0.5,1.0), font_size=font_size,
            pos=poses, anchor_x='left')
        self.label_visual.transform = transforms.NullTransform()

    def updateLabels(self):
        try:
            texts = []
            poses = []
            a = (self.physical_size[0]/ncols, self.physical_size[1]/nrows)
            font_size = 8
            for (x,y) in self.subplot_indices:
                chan_idx = y*ncols + x + nchans*self.parent.chip
                texts.append(' Channel {c}'.format(c=chan_idx))
                poses.append((a[0]*x, a[1]*(y+0.125)))
                if self.parent.display_impedance:
                    impedance = self.parent.getImpedance(chan_idx)
                    impedance_label = u' Impedance: {i:,.2f} k\N{OHM SIGN}'.format(i=impedance)
                    if self.parent.impedanceBad(impedance):
                        impedance_label += ' (BAD)'
                    texts.append(impedance_label)
                    poses.append((a[0]*x, a[1]*(y+0.875)))
            self.label_visual.text = texts
            self.label_visual.pos  = poses
        except:
            self.createLabels()

    def focusPlots(self):
        if self.selected_plots != []:
            # unfocus non-selected subplots
            unfocused_color = np.append(((0.75/0.855)*self.default_rgb), 1.0)
            bad_impedance_color = np.append(self.bad_impedance_rgb, 1.0)
            for (x,y) in self.subplot_indices:
                chan_idx = y*ncols + x + nchans*self.parent.chip
                plot_idx = y*ncols + x
                if self.parent.display_impedance and self.parent.impedanceBad(self.parent.getImpedance(chan_idx)):
                    self._program['u_colors[{C}]'.format(C=plot_idx)] = bad_impedance_color
                else:
                    self._program['u_colors[{C}]'.format(C=plot_idx)] = unfocused_color

            # focus selcted plots
            for plot in self.selected_plots:
                plot_x, plot_y = plot
                selected_idx = plot_y*ncols + plot_x
                focused_color = (1.0, 1.0, 1.0, 1.0)
                self._program['u_colors[{C}]'.format(C=selected_idx)] = focused_color
        else:
            default_color = np.append(self.default_rgb, 1.0)
            bad_impedance_color = np.append(self.bad_impedance_rgb, 1.0)
            for (x,y) in self.subplot_indices:
                chan_idx = y*ncols + x + nchans*self.parent.chip
                plot_idx = y*ncols + x
                if self.parent.display_impedance and self.parent.impedanceBad(self.parent.getImpedance(chan_idx)):
                    self._program['u_colors[{C}]'.format(C=plot_idx)] = bad_impedance_color
                else:
                    self._program['u_colors[{C}]'.format(C=plot_idx)] = default_color

    # used by parent widget. new_yvals comes in as an array with shape (nchans, nsamps)
    def draw_new_data(self, new_yvals, latest_point):
        for chan in xrange(ncols*nrows):
            self.repacked_yvals[chan%ncols, chan//ncols,:] = new_yvals[chan,:]
        self._program['a_position'] = self.repacked_yvals.ravel().astype(np.float32)
        self._program['u_latest_point'] = latest_point
        self.focusPlots()
        self.update()

    def on_resize(self, event):
        vp = 0, 0, self.physical_size[0], self.physical_size[1]
        self.context.set_viewport(*vp)
        self.border_collection['viewport'] = vp
        self.updateLabels()
        self.label_visual.transforms.configure(canvas=self, viewport=vp)
        self.update()

    def on_draw(self, event):
        gloo.clear()
        self._program.draw('line_strip')
        self.border_collection.draw()
        self.label_visual.draw()

    def on_mouse_wheel(self, event):
        d = np.sign(event.delta[1]) * .05
        scale_x, scale_y = self._program['u_scale']
        if 'Control' and 'Shift' in event.modifiers:
            scale_x_new, scale_y_new = (max(1, scale_x*np.exp(0.0*d)),
                                        max(1, scale_y*np.exp(2.5*d)))
        elif 'Control' in event.modifiers:
            scale_x_new, scale_y_new = (max(1, scale_x*np.exp(2.5*d)),
                                        max(1, scale_y*np.exp(0.0*d)))
        # constrain scale factors
        range_x_new = self.nsamps/(30*scale_x_new)
        if range_x_new < self.parent.frame_period:
            range_x_new = self.parent.frame_period
            scale_x_new = self.nsamps/(30*range_x_new)
        range_y_new = self.parent.deltay_uv/scale_y_new
        if range_y_new < MICROVOLTS_PER_COUNT:
            range_y_new = MICROVOLTS_PER_COUNT
            scale_y_new = self.parent.deltay_uv/range_y_new

        self._program['u_scale'] = (scale_x_new, scale_y_new)
        self.parent.setInfoLabel(self.nsamps/(30*scale_x_new), self.parent.deltay_uv/scale_y_new)
        self.update()

    def on_mouse_press(self, click):
        # plot that mouse is within
        plot_x = ncols*click.pos[0]/self.size[0]
        plot_y = nrows*click.pos[1]/self.size[1]
        plot = (plot_x, plot_y)

        modifiers = QtGui.QApplication.keyboardModifiers()

        if modifiers & QtCore.Qt.ControlModifier:
            # focus multiple subplots when Ctrl held down
            if plot not in self.selected_plots:
                self.selected_plots.append(plot)
            else:
                self.selected_plots.remove(plot)
        else:
            # focus only plot most recently clicked when Ctrl not held down
            if plot not in self.selected_plots:
                self.selected_plots = [plot]
            else:
                self.selected_plots = []
        self.focusPlots()
        self.update()

if __name__=='__main__':
    import sys
    from PlaybackDialog import PlaybackDialog
    if len(sys.argv) < 2:
        print 'Need location of a Willow snapshot or experiment as a command-line argument.'
        sys.exit(1)
    else:
        filename = sys.argv[1]
        dataset = WillowDataset(filename, -1)
        dataset.importData()

    snapshot_dir = os.path.dirname(filename)
    impedanceFiles = glob.glob(os.path.join(snapshot_dir, 'impedance*.h5'))
    if len(impedanceFiles) > 0:
        impedance_filename = impedanceFiles[0]
        f = h5py.File(impedance_filename)
        impedanceMap = f['impedanceMeasurements']
    else:
        impedanceMap = None

    app = QtGui.QApplication(sys.argv)
    dlg = PlaybackDialog()
    if dlg.exec_():
        params = dlg.getParams()
        playbackWindow = PlaybackWindow(params, dataset, impedanceMap)
        playbackWindow.show()
    app.exec_()
